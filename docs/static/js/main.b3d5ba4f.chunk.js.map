{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","pages/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","placeholder","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","GifGrid","loading","state","setState","useEffect","then","useFechGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"8PAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAgB5C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAE1BR,GAAc,SAAAS,GAAU,OAAMP,GAAN,mBAAqBO,OAC7CN,EAAc,OAOd,2BAAOO,KAAK,OAAOC,YAAY,qCAC9BC,MAAOV,EAAYW,SAfP,SAACR,GAAD,OAAOF,EAAcE,EAAES,OAAOF,YAsBvDb,EAAYgB,UAAY,CACpBf,c,OAAgBgB,EAAUC,KAAKC,Y,2BC7BtBC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACP,mCACNC,EAFa,iDAEoCC,UAAUH,GAF9C,6BACP,oCADO,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAEDC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC5B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QAXxB,kBAcZM,GAdY,4CAAH,sDCCPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,yBAAKc,UAAU,0CACX,yBAAMC,IAAKf,EAAKU,MAAOA,IACtB,2BAAIA,KCFJM,EAAU,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECFZ,SAACA,GAAc,IAAD,EACXnB,mBAAS,CAC/B0B,KAAM,GACNY,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAiBrC,OAXAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAK,SAAAlB,GAAI,OAAIgB,EAAS,CACpCd,KAAMF,EACNc,SAAS,SAGd,IAKIC,EDbyBI,CAAYxB,GAA/Ba,EAFsB,EAE5BN,KAAcY,EAFc,EAEdA,QASrB,OAEI,oCACA,4BAAKnB,GACJmB,GAAW,uBAAGH,UAAU,0DAAb,cACR,yBAAKA,UAAU,cAEPH,EAAOJ,KAAI,SAAAC,GAAG,OACd,kBAAC,EAAD,eAAae,IAAKf,EAAIC,IAAQD,UEDnCgB,EAnBM,WAAO,IAAD,EACa7C,mBAAS,CAAC,eADvB,mBAChBQ,EADgB,KACJT,EADI,KAEvB,OACI,oCACI,yCACA,6BACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,4BAEQS,EAAWoB,KAAI,SAAAT,GAAQ,OAElB,kBAAC,EAAD,CAASyB,IAAKzB,EAAUA,SAAUA,UCT3D2B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.b3d5ba4f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n\r\n    const handleChange = (e) => setInputValue(e.target.value); \r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        // console.log('submit', e);\r\n        if(inputValue.trim().length > 2){\r\n            // Se añade añade un valor a las categorias utilizando el callback del hook del componente para cambiar valores\r\n            setCategories(categories => [ inputValue, ...categories]);\r\n            setInputValue(''); \r\n        }\r\n       \r\n        // setCategories([...categories, inputValue]);\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input type=\"text\" placeholder=\"Ingrese un nombre y precione enter\"\r\n             value={inputValue} onChange={handleChange}>\r\n            </input>\r\n            {/* <button type=\"submit\">Agregar</button> */}\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.prototype = {\r\n    setCategories:  PropTypes.func.isRequired\r\n}\r\n","\r\nexport const getGifs = async (category) => {\r\n    const key = \"DzlKHsxviUPIWPXkqQGHGZJmR3RHTH2o\";\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=${key}`;\r\n    const resp = await fetch(url);\r\n    // const  {data, pagination}  = await resp.json();\r\n    const  {data}  = await resp.json();\r\n    // console.log(pagination);\r\n     const gifs = data.map((img) => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url : img.images?.downsized_medium.url\r\n        }\r\n    } );\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    // console.log({id, title, url});\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img  src={url} title={title} />\r\n             <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFechGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n// import { getGifs } from '../helpers/getGifs';\r\n\r\nexport const GifGrid = ({category}) => {\r\n    \r\n    const {data: images, loading} = useFechGifs(category);\r\n    // const [count, setCount] = useState(0);\r\n    // const [images, setimages] = useState([])\r\n    // useEffect(() => {\r\n    //     getGifs(category).then(setimages );\r\n    // }, [category]);\r\n\r\n\r\n    \r\n    return (\r\n        // framen de una forma corta esto  \"<>\" es igual a <framgment></framgment>\r\n        <>\r\n        <h3>{category}</h3>\r\n        {loading && <p className=\"animate__animated animate__flash  animate-duration: 4s\">Loading...</p>}\r\n            <div className=\"card-grid \">\r\n                {\r\n                    images.map(img => (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                    ))\r\n                }\r\n                    \r\n            </div>\r\n        </>\r\n        \r\n    )\r\n}\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFechGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(resp => setState({\r\n            data: resp,\r\n            loading: false\r\n        }));\r\n      \r\n    }, [])\r\n\r\n    \r\n\r\n\r\n    return state;\r\n}","import React, { useState } from 'react'\r\nimport { AddCategory } from '../components/AddCategory';\r\nimport { GifGrid } from '../components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState(['Superman  ']);\r\n    return (\r\n        <>\r\n            <h2>GifExpert</h2>\r\n            <hr/>\r\n            <AddCategory setCategories={setCategories} />\r\n            <ul>\r\n                {\r\n                    categories.map(category => (\r\n                        // return <li key={category}>GifGrid</li>\r\n                         <GifGrid key={category} category={category} />\r\n                    ))\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'animate.css'\nimport GifExpertApp from './pages/GifExpertApp';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <GifExpertApp />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}